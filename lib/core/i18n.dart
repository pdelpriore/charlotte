import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by flappy_translator package
/// You should never change something directly in this file but, instead, generate new file when needed with the package
class I18n {
  String get appTitle => _getText("appTitle");

  String get networkErrorTitle => _getText("networkErrorTitle");

  String get retry => _getText("retry");

  String get emailHint => _getText("emailHint");

  String get passwordHint => _getText("passwordHint");

  String get userNameHint => _getText("userNameHint");

  String get userPasswordHint => _getText("userPasswordHint");

  String get connectButton => _getText("connectButton");

  String get loginError => _getText("loginError");

  String get profileError => _getText("profileError");

  String get networkError => _getText("networkError");

  String get emptyField => _getText("emptyField");

  String get serverError => _getText("serverError");

  String get timeTracking => _getText("timeTracking");

  String get myCharges => _getText("myCharges");

  String get meeting => _getText("meeting");

  String get trombinoscope => _getText("trombinoscope");

  String get profile => _getText("profile");

  String get myInformations => _getText("myInformations");

  String get myHolidays => _getText("myHolidays");

  String get myProjects => _getText("myProjects");

  String get trombiSearch => _getText("trombiSearch");

  String get myHolidaysBarTitle => _getText("myHolidaysBarTitle");

  String get holidayDemandButton => _getText("holidayDemandButton");

  String get holidayAvailableDays => _getText("holidayAvailableDays");

  String get inProgress => _getText("inProgress");

  String get ok => _getText("ok");

  String get rejected => _getText("rejected");

  String get holidayDemandTitle => _getText("holidayDemandTitle");

  String get departureDate => _getText("departureDate");

  String get returnDate => _getText("returnDate");

  String get duration => _getText("duration");

  String get comments => _getText("comments");

  String get saveButton => _getText("saveButton");

  String get profileDisconnect => _getText("profileDisconnect");

  String get holidayError => _getText("holidayError");

  String get holidayDeposedMessage => _getText("holidayDeposed");

  String get yesButton => _getText("yesButton");

  String get noButton => _getText("noButton");

  String get logoutConfirm => _getText("logoutConfirm");

  String get profileImageError => _getText("profileImageError");

  I18n(Locale locale) {
    this._locale = locale;
    _localizedValues = null;
  }

  Locale _locale;

  static Map<String, String> _localizedValues;

  static Map<String, String> _frValues = {
    "appTitle": "Super titre",
    "networkErrorTitle": "Aucun réseau",
    "retry": "Réessayer",
    "emailHint": "Email",
    "passwordHint": "Mot de passe",
    "userNameHint": "Nom d'utilisateur",
    "userPasswordHint": "Mot de passe",
    "connectButton": "Connexion",
    "loginError": "Identifiant ou mot de passe incorrect",
    "profileError": "Pas de données d'utilisateur",
    "networkError": "Réseau hors de portée",
    "emptyField": "Formulaire ne peut pas être vide",
    "serverError": "Erreur de serveur s'est produit",
    "timeTracking": "TimeTracking",
    "myCharges": "Mes frais",
    "meeting": "Réunion",
    "trombinoscope": "Trombi",
    "profile": "Profil",
    "myInformations": "Mes informations",
    "myHolidays": "Mes congés",
    "myProjects": "Mes projets",
    "trombiSearch": "Rechercher une personne",
    "myHolidaysBarTitle": "Mes congés",
    "holidayDemandButton": "Nouvelle demande",
    "holidayAvailableDays": "jours disponible",
    "inProgress": "En cours",
    "ok": "Ok",
    "rejected": "Refusé",
    "holidayDemandTitle": "Nouvelle demande",
    "departureDate": "Date départ",
    "returnDate": "Date retour",
    "duration": "Durée",
    "comments": "Commentaires",
    "saveButton": "Enregistrer",
    "profileDisconnect": "Déconnexion",
    "holidayError": "Demande n'a pas été enregistrée",
    "holidayDeposed": "Demande a été bien enregistrée",
    "yesButton": "Oui",
    "noButton": "Non",
    "logoutConfirm": "Vous êtes sûr ?",
    "profileImageError": "Erreur d'image"
  };

  static Map<String, String> _enValues = {
    "appTitle": "Awesome title",
    "networkErrorTitle": "Network error",
    "retry": "Retry",
    "emailHint": "Email",
    "passwordHint": "Password",
    "userNameHint": "User Name",
    "userPasswordHint": "Password",
    "connectButton": "Connection",
    "loginError": "Login or password incorrect",
    "profileError": "No user data",
    "networkError": "Network unavailable",
    "emptyField": "Form cannot be empty",
    "serverError": "Server error",
    "timeTracking": "TimeTracking",
    "myCharges": "My charges",
    "meeting": "Meeting",
    "trombinoscope": "Trombinoscope",
    "profile": "Profile",
    "myInformations": "My informations",
    "myHolidays": "My holidays",
    "myProjects": "My projects",
    "trombiSearch": "Find a person",
    "myHolidaysBarTitle": "My holidays",
    "holidayDemandButton": "New Demand",
    "holidayAvailableDays": "available days",
    "inProgress": "In progress",
    "ok": "Ok",
    "rejected": "Rejected",
    "holidayDemandTitle": "New demand",
    "departureDate": "Departure date",
    "returnDate": "Return date",
    "duration": "Duration",
    "comments": "Comments",
    "saveButton": "Save",
    "profileDisconnect": "Disconnect",
    "holidayError": "Demand has not been saved",
    "holidayDeposed": "Holiday demand saved",
    "yesButton": "Yes",
    "noButton": "No",
    "logoutConfirm": "Are you sure ?",
    "profileImageError": "Error image"
  };
  static Map<String, Map<String, String>> _allValues = {
    "fr": _frValues,
    "en": _enValues,
  };

  static I18n of(BuildContext context) {
    return Localizations.of<I18n>(context, I18n);
  }

  String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Future<I18n> load(Locale locale) async {
    I18n translations = new I18n(locale);
    _localizedValues = _allValues[locale.languageCode];
    return translations;
  }

  get currentLanguage => _locale.languageCode;
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  @override
  bool isSupported(Locale locale) => ['fr', 'en'].contains(locale.languageCode);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
